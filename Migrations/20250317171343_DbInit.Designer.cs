// <auto-generated />
using System;
using Kliker.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Kliker.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250317171343_DbInit")]
    partial class DbInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Kliker.Models.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("Primary Key");

                    b.HasIndex(new[] { "Name" }, "Name")
                        .IsUnique();

                    b.ToTable("achievements", null, t =>
                        {
                            t.HasComment("Przechowuje informacje o osiągnięciach. Każdy rekord to jedno dostępne do zdobycia osiągnięcie reprezentowane poprzez nazwę oraz opis.");
                        });
                });

            modelBuilder.Entity("Kliker.Models.PlayersAchievement", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("playerId");

                    b.Property<int>("AchievementId")
                        .HasColumnType("integer")
                        .HasColumnName("achievementId");

                    b.Property<DateOnly>("DateIfBeingAchieved")
                        .HasColumnType("date")
                        .HasColumnName("dateIfBeingAchieved");

                    b.HasKey("PlayerId")
                        .HasName("PlayersAchievments_pkey");

                    b.HasIndex("AchievementId");

                    b.ToTable("PlayersAchievments", null, t =>
                        {
                            t.HasComment("Tabela pośrednia pomiędzy tabelą użytkowników a tabelą osiągnięć. Przechowuje ona informacje o zdobyciu przez konkretnego użytkownika konkretnego osiągnięcia wraz z datą tego wydarzenia.");
                        });
                });

            modelBuilder.Entity("Kliker.Models.PlayersUpgrade", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("playerId");

                    b.Property<int>("UpgradeId")
                        .HasColumnType("integer")
                        .HasColumnName("upgradeId");

                    b.Property<DateOnly>("DateOfBeingUpgraded")
                        .HasColumnType("date")
                        .HasColumnName("dateOfBeingUpgraded");

                    b.HasKey("PlayerId", "UpgradeId")
                        .HasName("PlayersUpgrades_pkey");

                    b.HasIndex("UpgradeId");

                    b.ToTable("PlayersUpgrades", null, t =>
                        {
                            t.HasComment("Tabela pomocnicza zawierająca informacje o odblokowaniu ulepszeń przez graczy. Każdy rekord to reprezentacja odblokowania ulepszenia o konkretnym ID przez gracza o konkretnym ID.");
                        });
                });

            modelBuilder.Entity("Kliker.Models.Upgrade", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("LevelRequired")
                        .HasColumnType("integer")
                        .HasColumnName("levelRequired");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasPrecision(1)
                        .HasColumnType("numeric(1)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("upgrades_pkey");

                    b.HasIndex(new[] { "Name" }, "name is unique")
                        .IsUnique();

                    b.ToTable("upgrades", null, t =>
                        {
                            t.HasComment("Przechowuje informacje o ulepszeniach nabywanych przez użytkowników. Każdy rekord to pojedyncze ulepszenie reprezentowane przez nazwę i opis.");
                        });
                });

            modelBuilder.Entity("Kliker.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Banned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("Banned");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Email");

                    b.Property<int>("Lvl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("Lvl");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Password_hash");

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("Points");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)")
                        .HasColumnName("Username");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "email_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "username_unique")
                        .IsUnique();

                    b.ToTable("Users", null, t =>
                        {
                            t.HasComment("Zawiera informacje o kontach użytkowników. Każdy rekord to reprezentacja jednego użytkownika w postaci loginu, maila, hasła...");
                        });
                });

            modelBuilder.Entity("Kliker.Models.PlayersAchievement", b =>
                {
                    b.HasOne("Kliker.Models.Achievement", "Achievement")
                        .WithMany("PlayersAchievements")
                        .HasForeignKey("AchievementId")
                        .IsRequired()
                        .HasConstraintName("Foreign Key for achievements");

                    b.HasOne("Kliker.Models.User", "Player")
                        .WithMany("PlayersAchievements")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("Foreign Key for users");

                    b.Navigation("Achievement");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Kliker.Models.PlayersUpgrade", b =>
                {
                    b.HasOne("Kliker.Models.User", "Player")
                        .WithMany("PlayersUpgrades")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("PlayerId foreign key");

                    b.HasOne("Kliker.Models.Upgrade", "Upgrade")
                        .WithMany("PlayersUpgrades")
                        .HasForeignKey("UpgradeId")
                        .IsRequired()
                        .HasConstraintName("UpgradeId foreign key");

                    b.Navigation("Player");

                    b.Navigation("Upgrade");
                });

            modelBuilder.Entity("Kliker.Models.Achievement", b =>
                {
                    b.Navigation("PlayersAchievements");
                });

            modelBuilder.Entity("Kliker.Models.Upgrade", b =>
                {
                    b.Navigation("PlayersUpgrades");
                });

            modelBuilder.Entity("Kliker.Models.User", b =>
                {
                    b.Navigation("PlayersAchievements");

                    b.Navigation("PlayersUpgrades");
                });
#pragma warning restore 612, 618
        }
    }
}
